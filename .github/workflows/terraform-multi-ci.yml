name: Terraform Azure Pipeline
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Terraform workspace/environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      destroy:
        description: 'Destroy Infrastructure?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      confirm_destroy:
        description: 'Type YES to confirm destroy (case-sensitive)'
        required: false
        default: ''

env:
  TF_WORKSPACE: ${{ github.event.inputs.environment }}
  DESTROY_MODE: ${{ github.event.inputs.destroy }}
  CONFIRM_DESTROY: ${{ github.event.inputs.confirm_destroy }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Set Env-Specific Variables
        id: set-vars
        run: |
          echo "Setting secrets for environment: $TF_WORKSPACE"
          if [ "$TF_WORKSPACE" = "dev" ]; then
            echo "location=${{ secrets.TF_DEV_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_DEV_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_DEV_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_DEV_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          elif [ "$TF_WORKSPACE" = "stage" ]; then
            echo "location=${{ secrets.TF_STAGE_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_STAGE_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_STAGE_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_STAGE_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          elif [ "$TF_WORKSPACE" = "prod" ]; then
            echo "location=${{ secrets.TF_PROD_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_PROD_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_PROD_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_PROD_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          else
            echo "Invalid workspace selected" && exit 1
          fi

      - name: Terraform Init
        run: terraform init -backend-config=environments/${{ env.TF_WORKSPACE }}.backend.tfvars

      - name: Select or Create Workspace
        run: terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan or Destroy Plan
        run: |
          if [ "$DESTROY_MODE" == "true" ]; then
            if [ "$CONFIRM_DESTROY" != "YES" ]; then
              echo "âœ‹ Destroy confirmation missing or incorrect. Type YES to proceed." && exit 1
            fi
            terraform plan -destroy \
              -var="location=$location" \
              -var="admin_username=$admin_username" \
              -var="public_key_path=$public_key_path" \
              -var="private_key_path=$private_key_path" \
              -out=tfplan
          else
            terraform plan \
              -var="location=$location" \
              -var="admin_username=$admin_username" \
              -var="public_key_path=$public_key_path" \
              -var="private_key_path=$private_key_path" \
              -out=tfplan
          fi

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ env.TF_WORKSPACE }}
          path: tfplan

  approve-and-apply:
    name: Manual Approval + Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment:
      name: terraform-${{ github.event.inputs.environment }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Env-Specific Variables (Again)
        run: |
          echo "Setting secrets again for apply phase..."
          if [ "$TF_WORKSPACE" = "dev" ]; then
            echo "location=${{ secrets.TF_DEV_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_DEV_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_DEV_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_DEV_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          elif [ "$TF_WORKSPACE" = "stage" ]; then
            echo "location=${{ secrets.TF_STAGE_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_STAGE_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_STAGE_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_STAGE_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          elif [ "$TF_WORKSPACE" = "prod" ]; then
            echo "location=${{ secrets.TF_PROD_LOCATION }}" >> $GITHUB_ENV
            echo "admin_username=${{ secrets.TF_PROD_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "public_key_path=${{ secrets.TF_PROD_PUBLIC_KEY_PATH }}" >> $GITHUB_ENV
            echo "private_key_path=${{ secrets.TF_PROD_PRIVATE_KEY_PATH }}" >> $GITHUB_ENV
          else
            echo "Invalid workspace selected" && exit 1
          fi

      - name: Terraform Init
        run: terraform init -backend-config=environments/${{ env.TF_WORKSPACE }}.backend.tfvars

      - name: Select Workspace
        run: terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ env.TF_WORKSPACE }}
          path: .

      - name: Terraform Apply or Destroy
        run: |
          terraform apply -auto-approve tfplan

      - name: Notify on Destroy
        if: env.DESTROY_MODE == 'true'
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data "{
              \"text\": \"ðŸš¨ *Terraform Destroy Alert*\nWorkspace: *$TF_WORKSPACE*\nActor: *${{ github.actor }}*\nRepo: *${{ github.repository }}*\nðŸ”— <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\",
              \"username\": \"Terraform Bot\",
              \"icon_emoji\": \":warning:\"
            }"
